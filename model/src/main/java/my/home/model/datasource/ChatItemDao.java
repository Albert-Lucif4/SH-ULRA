/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package my.home.model.datasource;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import my.home.model.entities.ChatItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table CHAT_ITEM.
 */
public class ChatItemDao extends AbstractDao<ChatItem, Long> {

    public static final String TABLENAME = "CHAT_ITEM";

    /**
     * Properties of entity ChatItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property State = new Property(3, int.class, "state", false, "STATE");
        public final static Property Seq = new Property(4, int.class, "seq", false, "SEQ");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
    }

    ;


    public ChatItemDao(DaoConfig config) {
        super(config);
    }

    public ChatItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_ITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONTENT' TEXT NOT NULL ," + // 1: content
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'STATE' INTEGER NOT NULL ," + // 3: state
                "'SEQ' INTEGER NOT NULL ," + // 4: seq
                "'DATE' INTEGER);"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatItem entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getContent());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getState());
        stmt.bindLong(5, entity.getSeq());

        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ChatItem readEntity(Cursor cursor, int offset) {
        ChatItem entity = new ChatItem( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // content
                cursor.getInt(offset + 2), // type
                cursor.getInt(offset + 3), // state
                cursor.getInt(offset + 4), // seq
                cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // date
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
        entity.setSeq(cursor.getInt(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ChatItem entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
