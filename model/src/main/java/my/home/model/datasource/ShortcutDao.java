/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package my.home.model.datasource;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import my.home.model.entities.Shortcut;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SHORTCUT.
 */
public class ShortcutDao extends AbstractDao<Shortcut, Long> {

    public static final String TABLENAME = "SHORTCUT";

    /**
     * Properties of entity Shortcut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property Invoke_count = new Property(2, Integer.class, "invoke_count", false, "INVOKE_COUNT");
        public final static Property Weight = new Property(3, Double.class, "weight", false, "WEIGHT");
    }

    ;


    public ShortcutDao(DaoConfig config) {
        super(config);
    }

    public ShortcutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'SHORTCUT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONTENT' TEXT," + // 1: content
                "'INVOKE_COUNT' INTEGER," + // 2: invoke_count
                "'WEIGHT' REAL);"); // 3: weight
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHORTCUT'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Shortcut entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }

        Integer invoke_count = entity.getInvoke_count();
        if (invoke_count != null) {
            stmt.bindLong(3, invoke_count);
        }

        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(4, weight);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Shortcut readEntity(Cursor cursor, int offset) {
        Shortcut entity = new Shortcut( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // invoke_count
                cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3) // weight
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Shortcut entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInvoke_count(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setWeight(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Shortcut entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Shortcut entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
